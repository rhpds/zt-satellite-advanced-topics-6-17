
---
- name: Create inventory
  hosts: localhost
  gather_facts: false
  tasks:
  - name: Add bastion host
    ansible.builtin.add_host:
      name: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
      ansible_ssh_host: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
      ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
      ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
      ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
  - name: Add nodes
    ansible.builtin.add_host:
      name: "{{ item }}"
      ansible_ssh_host: "{{ item }}"
      ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
      ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
      ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
      ansible_python_interpreter: /usr/libexec/platform-python
    loop:
      - rhel1
      - rhel2
      - satellite-2

- name: Pre task(s) for rhel2
  hosts: rhel2
  gather_facts: false
  vars:
    guid: "{{ lookup('ansible.builtin.env', 'GUID') }}"
  tasks:

  - name: Fetch private SSH key to be used later
    ansible.builtin.slurp:
      src: "/home/rhel/.ssh/{{ guid }}key.pem"
    register: r_slurp
    
  - name: Save to tmp
    ansible.builtin.copy:
      dest: "/tmp/{{ guid }}key.pem"
      content: "{{ r_slurp['content'] | b64decode }}"
      mode: 0600
    delegate_to: localhost

  
- name: Demo Playbook for the ansible-runner API
  hosts: all:!localhost
  gather_facts: false
  tasks:

  - ansible.builtin.wait_for_connection:
  - name: Simple debug task
    ansible.builtin.debug:
      msg: "Hello Runner"

  - name: Set config_host variable with ansible_host value
    set_fact:
      config_host: "{{ ansible_host }}"

  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: "/tmp/setup-scripts/"
      state: directory
      mode: '0755'

  - name: Check if setup-server.sh exists
    ansible.builtin.stat:
      path: "./setup-{{ config_host }}.sh"
    delegate_to: localhost
    register: r_script_test

  - name: Copy script file
    when: r_script_test.stat.exists
    copy:
      src: "./setup-{{ ansible_host }}.sh"
      dest: "/tmp/setup-scripts/setup-{{ ansible_host }}.sh"
    register: r_result

  - name: Execute module_stage-host.sh if it exists
    when: r_script_test.stat.exists
    shell: "sh -x /tmp/setup-scripts/setup-{{ ansible_host }}.sh > /tmp/setup-scripts/setup-{{ ansible_host }}.log 2>&1"
    become: true
    register: r_result

  - name: Output script result
    ansible.builtin.debug:
      var: r_result.stdout
    when: r_script_test.stat.exists

  - name: Write script result to file
    ansible.builtin.copy:
      content: "{{ r_result.stdout | default(r_result.stderr) | default(r_result) }}"
      dest: "/tmp/{{ ansible_host }}-setup-script.out"
    delegate_to: localhost
    when:
    - r_result is defined

  - name: Output script result
    ansible.builtin.debug:
      var: r_result
    when: r_result is defined

  - name: Fail if stage was failed
    ansible.builtin.fail:
      msg: "Setup failed"
    when:
    - r_result is defined
    - r_result.rc != 0

- name: Create inventory
  hosts: localhost
  gather_facts: false
  vars:
    guid: "{{ lookup('ansible.builtin.env', 'GUID') }}"
  tasks:
  - name: Add rhel2 host with SSH key
    ansible.builtin.add_host:
      name: "rhel2post"
      ansible_ssh_host: "rhel2"
      ansible_ssh_user: "root"
      ansible_ssh_private_key_file: "/tmp/{{ guid }}key.pem"

- name: Post task(s) for rhel2
  hosts: rhel2post
  gather_facts: true
  become: true
  vars:
    rhel_user_password: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"
  tasks:
    - name: Reboot the system
      ansible.builtin.reboot:
    - name: Ensure user 'rhel' exists and has the specified password
      ansible.builtin.user:
        name: rhel
        password: "{{ rhel_user_password | password_hash('sha512') }}" # Generates SHA512 hash from prompted password
        state: present
        shell: /bin/bash         # Set default shell
        create_home: yes         # Ensure home directory is created
        home: /home/rhel         # Specify home directory path
        groups: wheel            # Add user to the 'wheel' group (for sudo access, typically)
        append: yes              # Append to existing groups if user already exists

    - name: Ensure user 'root' has the specified password
      ansible.builtin.user:
        name: root
        password: "{{ rhel_user_password | password_hash('sha512') }}" # Generates SHA512 hash from prompted password

    - name: Add PermitRootLogin configuration snippet
      ansible.builtin.copy:
        content: |
          PermitRootLogin yes
        dest: /etc/ssh/sshd_config.d/ansible_permit_root_login.conf
        owner: root
        group: root
        mode: '0644'

    - name: Reload sshd
      ansible.builtin.service:
        name: sshd
        state: reloaded

